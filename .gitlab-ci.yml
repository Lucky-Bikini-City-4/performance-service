# 사용할 도커 이미지
image: openjdk:17-jdk-slim

# 파이프라인에 사용될 변수들
variables:
  BUILD_DIR: 'build/libs'
  ARTIFACT_NAME: 'performance-service-build.jar'

stages:
  - build
  - test
  - deploy

# 빌드 (Build) 단계
build:
  stage: build
  tags:
    - aws-ubuntu-docker
  script:
    - echo "Building the project..."
    - mkdir -p src/main/resources
    - echo "$APPLICATION_YML" > src/main/resources/application.yml
    - cp src/main/resources/application.yml ./application.yml
    - chmod +x gradlew
    - ./gradlew clean build -x test
    - echo "Build complete."
  artifacts:
    paths:
      - $BUILD_DIR/$ARTIFACT_NAME
      - application.yml
    expire_in: 1 hour
  only:
    - main
    - dev

# 테스트 (Test) 단계
test:
  stage: test
  tags:
    - aws-ubuntu-docker
  services:
    - redis:6-alpine  # 테스트용 Redis 서비스
  variables:
    REDIS_URL: "redis://redis:6379"
  script:
    - echo "Running tests..."
    - mkdir -p src/main/resources

    # 테스트용 application-test.yml 생성
    - |
      cat > src/main/resources/application-test.yml << 'EOF'
      spring:
        application:
          name: performance-service
        datasource:
          url: jdbc:h2:mem:testdb;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE;DEFAULT_NULL_ORDERING=HIGH
          username: sa
          password: 
          driver-class-name: org.h2.Driver
        h2:
          console:
            enabled: true
        jpa:
          hibernate:
            ddl-auto: create-drop
          show-sql: false
          properties:
            hibernate:
              format_sql: false
              dialect: org.hibernate.dialect.H2Dialect
        data:
          redis:
            host: redis
            port: 6379
            timeout: 2000ms
        cache:
          type: simple
        kafka:
          bootstrap-servers: localhost:9093
      redisson:
        lock:
          wait-time: 1000
          lease-time: 2000
      server:
        port: 0
      eureka:
        client:
          enabled: false
      springdoc:
        swagger-ui:
          enabled: false
        api-docs:
          enabled: false
      logging:
        level:
          org.springframework: WARN
          com.dayaeyak.performance: INFO
      EOF

    - chmod +x gradlew
    # 테스트 프로파일로 테스트 실행
    - ./gradlew test -Dspring.profiles.active=test
    - echo "All tests passed."
  dependencies:
    - build
  only:
    - main
    - dev

# 배포 (Deploy) 단계 - Docker-in-Docker 사용
deploy:
  stage: deploy
  image: docker:24.0.5  # Docker 이미지로 변경
  services:
    - docker:24.0.5-dind  # Docker-in-Docker 서비스
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  tags:
    - aws-ubuntu-docker
  dependencies:
    - build
  before_script:
    - docker info  # Docker 연결 확인
  script:
    - echo "Starting deployment process..."

    # 도커 이미지 빌드
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA .

    # GitLab 레지스트리 로그인
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

    # 도커 이미지 푸시
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

    # SSH 클라이언트 설치
    - apk add --no-cache openssh-client

    # SSH를 통해 EC2 인스턴스에 접속하여 배포 스크립트 실행
    - echo "Connecting to EC2 instance and deploying..."
    - chmod 600 $EC2_PRIVATE_KEY
    - ssh -o StrictHostKeyChecking=no -i $EC2_PRIVATE_KEY $EC2_USER@$EC2_HOST "
      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
      docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA &&
      docker-compose -f /home/$EC2_USER/docker-compose.yml down &&
      docker-compose -f /home/$EC2_USER/docker-compose.yml up -d
      "
    - echo "Deployment successful."
  only:
    - main